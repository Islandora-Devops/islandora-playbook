---

- name: Trusted Host Settings
  blockinfile:
    state: present
    block: |
      $settings['trusted_host_patterns'] = array(
      {% for host in drupal_trusted_hosts %}
        '{{ host }}',
      {% endfor %}
      );
      $settings['flysystem'] = [
        'fedora' => [
          'driver' => 'fedora',
          'config' => [
            'root' => '{{ fedora_base_url }}',
          ],
        ],
      ];
      global $content_directories;
      $content_directories['sync'] = $app_root.'/../content/sync';
    path: "{{ drupal_trusted_hosts_file }}"
    marker: // {mark} ANSIBLE MANAGED BLOCK

- name: Uninstall core search module
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y pm-uninstall search"
  register: uninstall_search
  changed_when: "'successfully uninstalled' in uninstall_search.stdout"

- name: Set permissions on the public files directory
  file:
    recurse: yes
    state: directory
    path: "{{ drupal_public_filesystem }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

- name: Create drupal configs directory.
  file:
    state: directory
    path: "{{ webserver_app_drupal_config_path }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

- name: Create content sync directory.
  file:
    state: directory
    path: "{{ drupal_deploy_dir }}/content/sync"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

# masonry library is required by content_browser and not installed by composer due to issue 2971165.
- name: Create drupal library directory.
  file:
    state: directory
    path: "{{ drupal_external_libraries_directory }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

- name: Unarchive masonry library.
  unarchive:
    src: "https://github.com/desandro/masonry/archive/v3.3.2.zip"
    dest: "{{ drupal_external_libraries_directory }}"
    creates: "{{ drupal_external_libraries_directory }}/masonry"
    remote_src: yes

- name: Rename masonry directory.
  command: mv "{{ drupal_external_libraries_directory }}/masonry-3.3.2" "{{ drupal_external_libraries_directory }}/masonry"
  args:
    creates: "{{ drupal_external_libraries_directory }}/masonry"

# Set Matomo Settings
- name: Set Matomo site id.
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set matomo.settings site_id 1"
  register: set_search_api_config
  changed_when: "'Do you want to update site_id' in set_search_api_config.stdout"

- name: Set Matmo sever url.
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set matomo.settings url_http http://localhost:8000/matomo/"
  register: set_search_api_config
  changed_when: "'Do you want to update site_id' in set_search_api_config.stdout"

# pdf.js library
- name: ensure pdf.js directory exists
  file:
    path: "{{ drupal_external_libraries_directory }}/pdf.js"
    state: directory

- name: Unarchive pdf.js library
  unarchive:
    src: "https://github.com/mozilla/pdf.js/releases/download/v2.0.943/pdfjs-2.0.943-dist.zip"
    dest: "{{ drupal_external_libraries_directory }}/pdf.js"
    creates: "{{ drupal_external_libraries_directory }}/pdf.js/build"
    remote_src: yes

- name: Add project's /vendor/bin to $PATH (ubuntu)
  lineinfile:
    path: ~/.profile
    line: 'PATH="$PATH:{{ webserver_document_root }}/drupal/vendor/bin"'
    state: present
  become: false
  when: ansible_os_family == "Debian"

- name: Add project's /vendor/bin to $PATH (centos)
  lineinfile:
    path: ~/.bash_profile
    line: 'PATH="$PATH:{{ webserver_document_root }}/drupal/vendor/bin"'
    state: present
  become: false
  when: ansible_os_family == "RedHat"

